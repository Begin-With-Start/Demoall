// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.2.30'
    repositories {
        //外部的访问时候直接换成aliyun的即可；
//        maven { url 'http://maven.aliyun.com/nexus/content/repositories/google' }
//        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
//        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}

        maven { url 'http://maven.leoao.com/nexus/content/repositories/releases/' }
        maven { url 'http://maven.leoao.com/nexus/content/repositories/snapshots/' }

        //切换到私有库
        maven { url 'http://maven.leoao.com/nexus/content/repositories/google/' }
        maven { url 'http://maven.leoao.com/nexus/content/repositories/aliyun-public/' }
        maven { url 'http://maven.leoao.com/nexus/content/repositories/jcenter/' }

        maven { url uri('/Users/hexiaofei/Desktop/mojiang') }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.50"
        // NOTE: Do not place your application dependencies here
        classpath "com.minifly.demo:myplugin:1.0.0"
    }
}

allprojects {
    repositories {
        maven { url 'http://maven.leoao.com/nexus/content/repositories/releases/' }
        maven { url 'http://maven.leoao.com/nexus/content/repositories/snapshots/' }
//
//        //切换到私有库
        maven { url 'http://maven.leoao.com/nexus/content/repositories/google/' }
        maven { url 'http://maven.leoao.com/nexus/content/repositories/aliyun-public/' }
        maven { url 'http://maven.leoao.com/nexus/content/repositories/jcenter/' }
//        maven { url 'http://maven.aliyun.com/nexus/content/repositories/google' }
//        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
//        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
        maven { url 'https://jitpack.io' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// 自定义task task执行之前，执行之后的处理脚本；
//判断property是否存在；包含task 与 property
task ex36Hello {
}
ex36Hello.doFirst {
    println 'ex36hello first'
}
ex36Hello.doLast {
    println 'ex36hello last'
//    在gradle 脚本中，task property 属性都可用hasproperty进行判断；
    println 'is have property ex36hello' + project.hasProperty("ex36Hello")
    println 'is have property systemPro.myself' + project.hasProperty("systemPro.myself")
}

//ext 添加额外的属性  比起局部变量来说，ext的属性和变量更能够被外部和其他project访问到；
// moudle 中也可以访问到；
ext.age = 18

ext {
    phone = 18367161206
    adress = "哈哈哈地址"
}
task outputExt {
    doFirst {
        println("main project outputExt dofirst ....")
    }
    doLast {
        println "main project outputExt dolast phone:   ${phone}"
        println "main project age:   ${age}"
        println "main project adress:   ${adress}"
    }
}

//我们自定义的3个Task都位于TaskContainer中，Project中的tasks属性即表示该TaskContainer
task showTasks{
    doLast{
        println("task.class :" + tasks.class)
        println("task.size 大小: " + tasks.size())
    }
}

//打印所有的tast ；
gradle.getTaskGraph().whenReady {
    project.tasks.all {
        Task t = it
        String taskName = it.name
        println("--------taskName-----------:" + taskName + " :" + it.getPath())
        it.getTaskDependencies().any {
            println("-----------------taskName----dependsOn-----------------:")
            it.getDependencies(t).findAll() {
                println("----------------------------------:" + it.getPath())
            }
        }

    }
}


